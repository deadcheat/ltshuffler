/* components/Component.html generated by Svelte v1.40.0 */
var Component = (function() { "use strict";

	function data() {
    return {
        speakersListStr: '',
        speakersList: [],
        orderList: [],
        orderListStr: ''
    }
};

	var methods = {
    shuffle() {
        this.speakersListStr = this.get('speakersListStr')
        this.speakersList = this.speakersListStr.split('\n').filter(function(a){return a != ''})
        this.orderList = this.speakersList
        for(var i = this.orderList.length - 1; i > 0; i--){
            var r = Math.floor(Math.random() * (i + 1));
            var tmp = this.orderList[i];
            this.orderList[i] = this.orderList[r];
            this.orderList[r] = tmp;
        }
        this.orderListStr = this.orderList.join('\n')
        this.set({orderListStr: this.orderListStr})
        this.set({orderList: this.orderList})
    }
};

	function create_main_fragment(state, component) {
		var section, div, text_3, div_2, text_5, div_3, div_4, p, text_7, textarea, textarea_updating = false, text_11, div_5, a;

		var if_block = (state.orderList.length > 0) && create_if_block(state, component);

		function textarea_input_handler() {
			textarea_updating = true;
			component.set({ speakersListStr: textarea.value });
			textarea_updating = false;
		}

		function click_handler(event) {
			component.shuffle();
		}

		return {
			c: function create() {
				section = createElement("section");
				div = createElement("div");
				div.innerHTML = "<div class=\"notification is-info\"><h1 class=\"title\">LT登壇してくれる神様たちを無礼にもシャッフルするやーつ</h1></div>";
				text_3 = createText("\n    ");
				div_2 = createElement("div");
				if (if_block) if_block.c();
				text_5 = createText("\n    ");
				div_3 = createElement("div");
				div_4 = createElement("div");
				p = createElement("p");
				p.textContent = "登壇者入力";
				text_7 = createText("\n            ");
				textarea = createElement("textarea");
				text_11 = createText("\n    ");
				div_5 = createElement("div");
				a = createElement("a");
				a.textContent = "登壇順ガチャ！！";
				this.h();
			},

			h: function hydrate() {
				section.className = "section";
				div.className = "container";
				div_2.className = "container";
				div_3.className = "container field";
				div_4.className = "control";
				p.className = "title";
				textarea.className = "textarea is-info";
				textarea.name = "speakers";
				textarea.id = "speakersList";
				textarea.cols = "30";
				textarea.rows = "10";
				textarea.placeholder = "登壇者を改行区切りで入れてね";
				textarea.value = "\n            ";
				addListener(textarea, "input", textarea_input_handler);
				div_5.className = "container has-text-right";
				a.className = "button is-primary is-large";
				addListener(a, "click", click_handler);
			},

			m: function mount(target, anchor) {
				insertNode(section, target, anchor);
				appendNode(div, section);
				appendNode(text_3, section);
				appendNode(div_2, section);
				if (if_block) if_block.m(div_2, null);
				appendNode(text_5, section);
				appendNode(div_3, section);
				appendNode(div_4, div_3);
				appendNode(p, div_4);
				appendNode(text_7, div_4);
				appendNode(textarea, div_4);

				textarea.value = state.speakersListStr;

				appendNode(text_11, section);
				appendNode(div_5, section);
				appendNode(a, div_5);
			},

			p: function update(changed, state) {
				if (state.orderList.length > 0) {
					if (if_block) {
						if_block.p(changed, state);
					} else {
						if_block = create_if_block(state, component);
						if_block.c();
						if_block.m(div_2, null);
					}
				} else if (if_block) {
					if_block.u();
					if_block.d();
					if_block = null;
				}

				if (!textarea_updating) {
					textarea.value = state.speakersListStr;
				}
			},

			u: function unmount() {
				detachNode(section);
				if (if_block) if_block.u();
			},

			d: function destroy() {
				if (if_block) if_block.d();
				removeListener(textarea, "input", textarea_input_handler);
				removeListener(a, "click", click_handler);
			}
		};
	}

	// (18:16) {{#each orderList as order, index}}
	function create_each_block(state, orderList, order, index, component) {
		var tr, td, text_value = index+1, text, text_1, td_1, text_2_value = order, text_2;

		return {
			c: function create() {
				tr = createElement("tr");
				td = createElement("td");
				text = createText(text_value);
				text_1 = createText("\n                    ");
				td_1 = createElement("td");
				text_2 = createText(text_2_value);
			},

			m: function mount(target, anchor) {
				insertNode(tr, target, anchor);
				appendNode(td, tr);
				appendNode(text, td);
				appendNode(text_1, tr);
				appendNode(td_1, tr);
				appendNode(text_2, td_1);
			},

			p: function update(changed, state, orderList, order, index) {
				if ((changed.orderList) && text_2_value !== (text_2_value = order)) {
					text_2.data = text_2_value;
				}
			},

			u: function unmount() {
				detachNode(tr);
			},

			d: noop
		};
	}

	// (8:8) {{#if orderList.length > 0}}
	function create_if_block(state, component) {
		var p, text_1, table, thead, text_7, tbody;

		var orderList = state.orderList;

		var each_blocks = [];

		for (var i = 0; i < orderList.length; i += 1) {
			each_blocks[i] = create_each_block(state, orderList, orderList[i], i, component);
		}

		return {
			c: function create() {
				p = createElement("p");
				p.textContent = "やっていき順！！";
				text_1 = createText("\n        ");
				table = createElement("table");
				thead = createElement("thead");
				thead.innerHTML = "<tr><th>発表順</th>\n                    <th>発表者</th></tr>";
				text_7 = createText("\n            ");
				tbody = createElement("tbody");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}
				this.h();
			},

			h: function hydrate() {
				p.className = "title";
				table.className = "table is-fullwidth is-primary is-striped";
			},

			m: function mount(target, anchor) {
				insertNode(p, target, anchor);
				insertNode(text_1, target, anchor);
				insertNode(table, target, anchor);
				appendNode(thead, table);
				appendNode(text_7, table);
				appendNode(tbody, table);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(tbody, null);
				}
			},

			p: function update(changed, state) {
				var orderList = state.orderList;

				if (changed.orderList) {
					for (var i = 0; i < orderList.length; i += 1) {
						if (each_blocks[i]) {
							each_blocks[i].p(changed, state, orderList, orderList[i], i);
						} else {
							each_blocks[i] = create_each_block(state, orderList, orderList[i], i, component);
							each_blocks[i].c();
							each_blocks[i].m(tbody, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = orderList.length;
				}
			},

			u: function unmount() {
				detachNode(p);
				detachNode(text_1);
				detachNode(table);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}
			},

			d: function destroy() {
				destroyEach(each_blocks);
			}
		};
	}

	function Component(options) {
		init(this, options);
		this._state = assign(data(), options.data);

		this._fragment = create_main_fragment(this._state, this);

		if (options.target) {
			this._fragment.c();
			this._fragment.m(options.target, options.anchor || null);
		}
	}

	assign(Component.prototype, methods, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount
	 });

	Component.prototype._recompute = noop;

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function noop() {}

	function destroyEach(iterations) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d();
		}
	}

	function init(component, options) {
		component.options = options;

		component._observers = { pre: blankObject(), post: blankObject() };
		component._handlers = blankObject();
		component._root = options._root || component;
		component._yield = options._yield;
		component._bind = options._bind;
	}

	function assign(target) {
		var k,
			source,
			i = 1,
			len = arguments.length;
		for (; i < len; i++) {
			source = arguments[i];
			for (k in source) target[k] = source[k];
		}

		return target;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			handlers[i].call(this, data);
		}
	}

	function observe(key, callback, options) {
		var group = options && options.defer
			? this._observers.post
			: this._observers.pre;

		(group[key] || (group[key] = [])).push(callback);

		if (!options || options.init !== false) {
			callback.__calling = true;
			callback.call(this, this._state[key]);
			callback.__calling = false;
		}

		return {
			cancel: function() {
				var index = group[key].indexOf(callback);
				if (~index) group[key].splice(index, 1);
			}
		};
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this._root._lock) return;
		this._root._lock = true;
		callAll(this._root._beforecreate);
		callAll(this._root._oncreate);
		callAll(this._root._aftercreate);
		this._root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign({}, oldState, newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);
		dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
		this._fragment.p(changed, this._state);
		dispatchObservers(this, this._observers.post, changed, this._state, oldState);
	}

	function _mount(target, anchor) {
		this._fragment.m(target, anchor);
	}

	function _unmount() {
		this._fragment.u();
	}

	function blankObject() {
		return Object.create(null);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.pop()();
	}

	function differs(a, b) {
		return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function dispatchObservers(component, group, changed, newState, oldState) {
		for (var key in group) {
			if (!changed[key]) continue;

			var newValue = newState[key];
			var oldValue = oldState[key];

			var callbacks = group[key];
			if (!callbacks) continue;

			for (var i = 0; i < callbacks.length; i += 1) {
				var callback = callbacks[i];
				if (callback.__calling) continue;

				callback.__calling = true;
				callback.call(component, newValue, oldValue);
				callback.__calling = false;
			}
		}
	}
	return Component;
}());